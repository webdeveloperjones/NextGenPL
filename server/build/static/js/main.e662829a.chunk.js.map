{"version":3,"sources":["reducers/entryReducer.js","reducers/rootReducer.js","component/Header.js","utils/requests.js","component/ChartButton.js","component/MainTable.js","component/Main.js","component/AddButton.js","component/AddForm.js","component/App.js","index.js"],"names":["entryReducer","state","action","type","data","combineReducers","entries","Header","id","className","getAllWeights","a","console","log","axios","get","response","addRecord","record","post","headers","ChartButton","label","selected","setTimeFrame","timeFrame","classstr","onClick","e","allBtns","document","getElementsByClassName","i","length","classList","contains","toggle","thisBtn","currentTarget","newMin","Date","setDate","getDate","MainTable","useSelector","sort","b","map","item","date","key","Weight","toLocaleDateString","s3url","href","target","rel","src","alt","Main","dispatch","useDispatch","initAxisMin","useState","axisMin","setAxisMin","useEffect","alert","getData","width","chartType","loader","rows","columns","options","curveType","legend","position","hAxis","format","viewWindow","min","vAxis","viewWindowMode","colors","pointsVisible","AddButton","show","btn","getElementById","AddForm","weight","setWeight","img","setImg","handleSubmit","preventDefault","uploadBtn","Number","fieldWeight","Data","FormData","append","innerText","res","status","setTimeout","step","value","onChange","files","App","showform","setShowform","store","createStore","reducer","subscribe","getState","ReactDOM","render"],"mappings":"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","file":"static/js/main.e662829a.chunk.js","sourcesContent":["const entryReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ENTRIES':\n            return [...action.data]\n        case 'ADD_ENTRY':\n            return [action.data, ...state]\n        default:\n            return state\n    }\n}\n\n\nexport const setEntries = (items) => {\n    return {\n        type: 'SET_ENTRIES',\n        data: items\n    }\n}\n\nexport const addEntry = (item) => {\n    return {\n        type: 'ADD_ENTRY',\n        data: item\n    }\n}\n\nexport default entryReducer","import { combineReducers } from 'redux'\nimport entryReducer from './entryReducer'\n\n\nexport default combineReducers({\n    entries: entryReducer,\n}) ","import React from 'react';\n\n\nconst Header = () => {\n  return (\n    <header id=\"header\">\n      <div className=\"header--title\">\n        ProperLife\n      </div>\n    </header>\n  )\n}\n\nexport default Header;\n","import axios from 'axios'\n\nconst BaseURL = process.env.NODE_ENV === 'development' ? 'http://localhost:3001/api/daily' : '/api/daily'\n// const BaseURL = config.ENV === 'DEV' ? 'http://localhost:3001/api/daily' : \nconst getAllWeights = async () => {\n    console.log(\"Getting Weights...\")\n    const response = await axios.get(BaseURL)\n    console.log(\"Success\")\n    return response.data\n\n}\n\nconst addRecord = async (record) => {\n    console.log(\"Posting record: \", record)\n    const response = await axios.post(BaseURL, record, {\n        headers: {\n            'Accept': 'multipart/form-data',\n            'Content-Type': 'multipart/form-data',\n        }\n    })\n    console.log(\"Success\")\n    return response\n}\n\nexport {\n    getAllWeights,\n    addRecord\n}","import React from 'react'\n\nconst ChartButton = ({ label, selected, setTimeFrame, timeFrame }) => {\n    const handleClick = e => {\n        let allBtns = document.getElementsByClassName('main--chart--buttons--btn')\n        for (let i = 0; i < allBtns.length; ++i) {\n            if (allBtns[i].classList.contains('selected')) {\n                allBtns[i].classList.toggle('selected')\n                allBtns[i].classList.toggle('closed')\n            }\n        }\n        let thisBtn = e.currentTarget\n        if (thisBtn.classList.contains('closed')) {\n            thisBtn.classList.toggle('closed')\n        }\n        thisBtn.classList.toggle('selected')\n\n        let newMin = new Date()\n        newMin.setDate(newMin.getDate() - timeFrame)\n        setTimeFrame(newMin)\n\n\n    }\n\n    const classstr = selected ? \"main--chart--buttons--btn selected\" : \"main--chart--buttons--btn\"\n    return (\n        <button onClick={handleClick} className={classstr}><span>{label}</span></button>\n    )\n}\n\nexport default ChartButton","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst MainTable = () => {\n    let data = useSelector(state => state.entries)\n\n    return (\n        <section id=\"main--table\">\n            <div className=\"main--table--row\">\n                <div className=\"main--table--row--header\">Weight</div>\n                <div className=\"main--table--row--header\">Date</div>\n                <div className=\"main--table--row--header\">Image</div>\n            </div>\n            {\n                data.length\n                    ? data\n                        .sort((a, b) => a.Date - b.Date)\n                        .map(item => {\n                            let date = new Date(item.Date)\n                            return (\n                                <div key={item.Date} className=\"main--table--row\">\n                                    <div className=\"main--table--row--field main--table--row--weight\"><span>{item.Weight}</span></div>\n                                    <div className=\"main--table--row--field main--table--row--date\"><span>{date.toLocaleDateString()}</span></div>\n                                    <div className=\"main--table--row--field main--table--row--image\">\n                                        {\n                                            item.s3url && item.s3url.length > 0\n                                                ? <a href={item.s3url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                    <img src=\"/images/cameraIcon.svg\" alt=\"Camera Icon\" />\n                                                </a>\n                                                : false\n                                        }\n\n                                    </div>\n                                </div>\n                            )\n                        })\n\n\n\n                    : false\n            }\n\n        </section>\n    )\n\n}\n\nexport default MainTable","import React, { useEffect, useState } from 'react'\nimport { Chart } from \"react-google-charts\";\nimport { getAllWeights } from '../utils/requests'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setEntries } from '../reducers/entryReducer'\nimport ChartButton from './ChartButton'\nimport MainTable from './MainTable'\n\n\n\nconst Main = () => {\n    const dispatch = useDispatch()\n\n    const defaultChartStart = 7\n\n    let initAxisMin = new Date()\n    initAxisMin.setDate(initAxisMin.getDate() - defaultChartStart)\n\n    const [axisMin, setAxisMin] = useState(initAxisMin)\n    useEffect(() => {\n        const getData = async () => {\n            const data = await getAllWeights()\n            data ? dispatch(setEntries([...data])) : alert('Error loading data, first refresh then reach out to tech.')\n        }\n        getData()\n    }, [dispatch])\n\n    let data = useSelector(state => state.entries)\n    if (data.length) {\n        return (\n            <main id=\"main\" className=\"container\">\n                <div id=\"main--chart\">\n                    <Chart\n                        width={'100%'}\n                        id=\"weightChart\"\n                        chartType=\"LineChart\"\n                        loader={<div>Loading Chart</div>}\n                        rows={[\n                            ...data\n                                .sort((a, b) => a.Date - b.Date)\n                                .map(item => {\n                                    let date = new Date(item.Date)\n                                    return [date, item.Weight]\n                                })\n                        ]}\n                        columns={[\n                            {\n                                type: \"date\",\n                                label: \"Date\"\n                            },\n                            {\n                                type: \"number\",\n                                label: \"Weight\"\n                            }\n                        ]}\n                        options={{\n                            curveType: 'function',\n                            legend: {\n                                position: 'none'\n                            },\n                            hAxis: {\n                                format: 'MM/dd',\n                                viewWindow: {\n                                    min: axisMin\n                                }\n                            },\n                            vAxis: {\n                                viewWindowMode: 'pretty'\n                            },\n                            colors: ['#025C93'],\n                            // colors: ['#3B7C12'],\n                            pointsVisible: true\n                        }}\n                    />\n                </div>\n                <div className=\"main--chart--buttons\">\n                    <ChartButton timeFrame={defaultChartStart} setTimeFrame={setAxisMin} label=\"Week\" selected={true} />\n                    <ChartButton timeFrame={30} setTimeFrame={setAxisMin} label=\"Month\" />\n                    <ChartButton timeFrame={90} setTimeFrame={setAxisMin} label=\"3 Months\" />\n                </div>\n                <MainTable />\n            </main>\n        )\n    }\n    else {\n        return (\n            <main id=\"main\" className=\"container\">\n            </main>\n        )\n    }\n\n}\n\nexport default Main\n","import React from 'react'\n\n\nconst AddButton = ({ show }) => {\n  const handleClick = e => {\n    let btn = document.getElementById('addButton')\n    if (btn.classList.contains('open')) {\n      btn.classList.toggle('open')\n      show(0)\n    }\n    else {\n      btn.classList.toggle('open')\n      show(1)\n    }\n  }\n  return (\n    <button onClick={handleClick} id=\"addButton\"></button>\n  )\n}\n\nexport default AddButton\n","import React, { useState } from 'react'\nimport { addRecord } from '../utils/requests'\nimport { useDispatch } from 'react-redux'\nimport { addEntry } from '../reducers/entryReducer'\n\n\n\nconst AddForm = ({ show }) => {\n    const [weight, setWeight] = useState(\"\")\n    const [img, setImg] = useState([])\n    const dispatch = useDispatch()\n\n    const handleSubmit = async e => {\n        e.preventDefault()\n        let uploadBtn = document.getElementById('addForm--form--button')\n        if (!Number(weight) > 0) {\n            let fieldWeight = document.getElementsByClassName('field-weight')[0]\n            console.log(fieldWeight)\n            if (!fieldWeight.classList.contains('error')) {\n                fieldWeight.classList.toggle('error')\n            }\n        }\n        const Data = new FormData();\n        Data.append('weight', Number(weight))\n        if (img.length) {\n            Data.append('file', img[0])\n        }\n        uploadBtn.innerText = \"Uploading...\"\n        uploadBtn.classList.toggle('uploading')\n\n        const res = await addRecord(Data)\n        if (res.status !== 201) {\n            alert('error of some kind')\n            return\n        }\n        dispatch(addEntry(res.data))\n        console.log(res)\n\n        uploadBtn.innerText = \"Done!\"\n        uploadBtn.classList.toggle('uploading')\n        uploadBtn.classList.toggle('done')\n        setTimeout(() => {\n            uploadBtn.classList.toggle('done')\n            uploadBtn.innerText = \"Upload\"\n\n        }, 3000)\n        setWeight(\"\")\n        setImg([])\n        let btn = document.getElementById('addButton')\n        btn.classList.toggle('open')\n        show(0)\n    }\n\n    return (\n        <div id=\"addForm\" className=\"container\">\n            <div className=\"addForm--wrapper\">\n                <form id=\"addForm--form\">\n                    <div className=\"addForm--form--field field-weight\">\n                        <label><span>Weight - lbs:</span><span className=\"required\">*required</span></label>\n                        <input type=\"number\" step=\"0.2\" value={weight} onChange={e => setWeight(e.currentTarget.value)}></input>\n                    </div>\n                    <div className=\"addForm--form--field field-image\">\n                        <label>Image:</label>\n                        <input type=\"file\" id=\"file-upload\" onChange={e => setImg([...e.target.files])}></input>\n                    </div>\n                    <button id=\"addForm--form--button\" onClick={handleSubmit}>Upload</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default AddForm\n","import React, { useState } from 'react'\nimport Header from '../component/Header'\nimport Main from '../component/Main'\nimport AddButton from '../component/AddButton'\nimport AddForm from '../component/AddForm'\n\n\nfunction App() {\n  const [showform, setShowform] = useState(0)\n  return (\n    <>\n      <Header />\n      <AddButton show={setShowform} />\n      {\n        showform\n          ? <AddForm show={setShowform}/>\n          : false\n      }\n      <Main />\n    </>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom';\nimport React from 'react'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers/rootReducer'\nimport App from './component/App'\n// import './css/style.css'\nimport './css/style.min.css'\n\nconst store = createStore(reducer)\nstore.subscribe(() => console.log(\"Store: \", store.getState()))\n\nconsole.log(store.getState())\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}